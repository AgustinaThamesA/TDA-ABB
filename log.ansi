Archivos Entregados
===================

[4.0K]  [01;34m.[0m
├── [4.8K]  ejemplo.c
├── [4.9K]  Enunciado.md
├── [4.0K]  [01;34mimg[0m
│   ├── [ 32K]  [01;35malgo2.svg[0m
│   ├── [ 19K]  [01;35mdiagrama1.svg[0m
│   ├── [9.9K]  [01;35mdiagrama2.svg[0m
│   ├── [ 24K]  [01;35mestructura_abb.drawio.svg[0m
│   └── [ 44K]  [01;35mestructura_arbol.drawio.svg[0m
├── [ 826]  makefile
├── [1.1K]  pa2m.h
├── [ 12K]  pruebas_alumno.c
├── [ 12K]  README.md
└── [4.0K]  [01;34msrc[0m
    ├── [9.1K]  abb.c
    ├── [ 304]  abb_estructura_privada.h
    └── [3.3K]  abb.h

3 directories, 14 files

Linter
======

./src/abb.c:307:42: error: code should be clang-formatted [-Wclang-format-violations]
                        nodo->derecha, tamanio, funcion, aux);
                                                              ^
./src/abb.c:310:31: error: code should be clang-formatted [-Wclang-format-violations]
        funcion(nodo->elemento, aux);
                                     ^
[1;31m¡ERROR CORRIENDO CLANG:FORMAT! Revisa tu entrega, el estilo de código no fue respetado[0m

Compilación y pruebas
=====================\n
rm -f *.o pruebas_chanutron pruebas_alumno
gcc -std=c99 -Wall -Wconversion -Wtype-limits -pedantic -Werror -O2 -g src/*.c pruebas_chanutron.c -o pruebas_chanutron
rm -f pruebas_chanutron.c pruebas_abb.c
valgrind --leak-check=full --track-origins=yes --show-reachable=yes --error-exitcode=2 --show-leak-kinds=all --trace-children=yes ./pruebas_chanutron
==32076== Memcheck, a memory error detector
==32076== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==32076== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==32076== Command: ./pruebas_chanutron
==32076== 
[33;1m
Pruebas de creación de ABB
===========================[37;1m
[32;1m✓ [37;1mSe puede crear un abb
[32;1m✓ [37;1mEl abb se crea vacío
[32;1m✓ [37;1mLa cantidad de elementos es cero
[32;1m✓ [37;1mEl elemento raíz es NULL
==32077== 
==32077== HEAP SUMMARY:
==32077==     in use at exit: 0 bytes in 0 blocks
==32077==   total heap usage: 2 allocs, 2 frees, 4,120 bytes allocated
==32077== 
==32077== All heap blocks were freed -- no leaks are possible
==32077== 
==32077== For lists of detected and suppressed errors, rerun with: -s
==32077== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de inserción
=====================[37;1m
[32;1m✓ [37;1mPuedo insertar un elemento en el abb.
[32;1m✓ [37;1mEl elemento queda como valor raíz
[32;1m✓ [37;1mEl abb ya no está vacío.
[32;1m✓ [37;1mLa cantidad de elementos es 1
[32;1m✓ [37;1mPuedo insertar un elemento menor que el primero.
[32;1m✓ [37;1mEl abb queda con un hijo izquierdo y sin hijo derecho.
[32;1m✓ [37;1mEl elemento queda a la izquierda de la raíz.
[32;1m✓ [37;1mLa cantidad de elementos es 2
[32;1m✓ [37;1mPuedo insertar un elemento mayor que el primero.
[32;1m✓ [37;1mEl abb queda con un hijo izquierdo y un hijo derecho.
[32;1m✓ [37;1mEl elemento queda a la derecha de la raíz.
[32;1m✓ [37;1mLa cantidad de elementos es 3
[32;1m✓ [37;1mLos tres elementos se encuentran en las posiciones esperadas.
[32;1m✓ [37;1mPuedo insertar un elemento menor a los que estaban.
[32;1m✓ [37;1mEl hijo izquierdo del raíz ahora tiene un hijo izquierdo.
[32;1m✓ [37;1mEl elemento tiene el valor esperado.
[32;1m✓ [37;1mLa cantidad de elementos es 4
[32;1m✓ [37;1mPuedo insertar un elemento mayor a los que estaban.
[32;1m✓ [37;1mEl hijo derecho del raíz ahora tiene un hijo derecho.
[32;1m✓ [37;1mEl elemento tiene el valor esperado.
[32;1m✓ [37;1mLa cantidad de elementos es 5
==32078== 
==32078== HEAP SUMMARY:
==32078==     in use at exit: 0 bytes in 0 blocks
==32078==   total heap usage: 7 allocs, 7 frees, 4,240 bytes allocated
==32078== 
==32078== All heap blocks were freed -- no leaks are possible
==32078== 
==32078== For lists of detected and suppressed errors, rerun with: -s
==32078== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de búsqueda
====================[37;1m
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBuscar un elemento inexistente devuelve NULL.
==32079== 
==32079== HEAP SUMMARY:
==32079==     in use at exit: 0 bytes in 0 blocks
==32079==   total heap usage: 12 allocs, 12 frees, 4,360 bytes allocated
==32079== 
==32079== All heap blocks were freed -- no leaks are possible
==32079== 
==32079== For lists of detected and suppressed errors, rerun with: -s
==32079== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de borrado
==================[37;1m
[32;1m✓ [37;1mPuedo borrar un nodo hoja
[32;1m✓ [37;1mEl nodo eliminado no existe mas.
[32;1m✓ [37;1mLa cantidad de elementos es 6
[32;1m✓ [37;1mPuedo borrar un nodo no hoja con un hijo.
[32;1m✓ [37;1mEl nodo que queda en su lugar es el nodo hijo.
[32;1m✓ [37;1mLa cantidad de elementos es 5
[32;1m✓ [37;1mPuedo borrar un nodo con dos hijos.
[32;1m✓ [37;1mEl nodo que queda en su lugar es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mPuedo borrar el nodo raíz (con dos hijos).
[32;1m✓ [37;1mEl nodo que queda en su lugar es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mLa cantidad de elementos es 3
[32;1m✓ [37;1mA la izquierda de la raíz queda el elemento esperado.
[32;1m✓ [37;1mA la derecha de la raíz queda el elemento esperado.
[32;1m✓ [37;1mPuedo borrar el nodo raíz (con un hijo).
[32;1m✓ [37;1mEl nodo que queda en su lugar es el unico hijo.
[32;1m✓ [37;1mA la izquierda de la raíz queda el elemento esperado.
[32;1m✓ [37;1mA la derecha de la raíz queda el elemento esperado.
[32;1m✓ [37;1mPuedo borrar otro nodo hoja.
[32;1m✓ [37;1mA la izquierda de la raíz queda el elemento esperado.
[32;1m✓ [37;1mA la derecha de la raíz queda el elemento esperado.
[32;1m✓ [37;1mPuedo borrar el nodo raíz (sin hijos).
[32;1m✓ [37;1mLa cantidad de elementos es 0
[32;1m✓ [37;1mNo queda nadie en la raíz, abb vacío.
[32;1m✓ [37;1mLa funcion abb_vacio devuelve true.
==32080== 
==32080== HEAP SUMMARY:
==32080==     in use at exit: 0 bytes in 0 blocks
==32080==   total heap usage: 9 allocs, 9 frees, 4,288 bytes allocated
==32080== 
==32080== All heap blocks were freed -- no leaks are possible
==32080== 
==32080== For lists of detected and suppressed errors, rerun with: -s
==32080== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de borrado (siempre borra la raíz)
===========================================[37;1m
[32;1m✓ [37;1mPuedo borrar la raíz del abb.
[32;1m✓ [37;1mEl elemento que queda en la raíz es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mPuedo borrar la raíz del abb.
[32;1m✓ [37;1mEl elemento que queda en la raíz es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mPuedo borrar la raíz del abb.
[32;1m✓ [37;1mEl elemento que queda en la raíz es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mLa cantidad de elementos es 7
[32;1m✓ [37;1mPude eliminar todos los elementos restantes del abb siempre borrando la raíz.
[32;1m✓ [37;1mEl abb queda vacío.
==32081== 
==32081== HEAP SUMMARY:
==32081==     in use at exit: 0 bytes in 0 blocks
==32081==   total heap usage: 12 allocs, 12 frees, 4,360 bytes allocated
==32081== 
==32081== All heap blocks were freed -- no leaks are possible
==32081== 
==32081== For lists of detected and suppressed errors, rerun with: -s
==32081== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de insertar/eliminar/buscar
===================================[37;1m
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mSe puede eliminar todos los elementos del abb sin problemas.
[32;1m✓ [37;1mEl abb queda vacío.
[32;1m✓ [37;1mSe pueden volver a insertar elementos en el abb.
[32;1m✓ [37;1mBusco un elemento y lo encuentro
[32;1m✓ [37;1mBusco un elemento y lo encuentro
[32;1m✓ [37;1mBusco un elemento y lo encuentro
==32082== 
==32082== HEAP SUMMARY:
==32082==     in use at exit: 0 bytes in 0 blocks
==32082==   total heap usage: 27 allocs, 27 frees, 4,720 bytes allocated
==32082== 
==32082== All heap blocks were freed -- no leaks are possible
==32082== 
==32082== For lists of detected and suppressed errors, rerun with: -s
==32082== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de destructor
=====================[37;1m
[32;1m✓ [37;1mLuego de llamar a abb_destruir_todo, se invoca el destructor la cantidad de veces correcta.
[32;1m✓ [37;1mEl destructor fue invocado sobre los elementos correctos
==32083== 
==32083== HEAP SUMMARY:
==32083==     in use at exit: 0 bytes in 0 blocks
==32083==   total heap usage: 14 allocs, 14 frees, 4,408 bytes allocated
==32083== 
==32083== All heap blocks were freed -- no leaks are possible
==32083== 
==32083== For lists of detected and suppressed errors, rerun with: -s
==32083== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de recorridos e iterador interno
========================================[37;1m
[33;1m
Recorrido inorden
=================[37;1m
[32;1m✓ [37;1mLa función de recorrido devuelve la cantidad de elementos esperados
[32;1m✓ [37;1mLos elementos en el vector tienen el orden esperado.
[32;1m✓ [37;1mPido recorrer menos elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[32;1m✓ [37;1mPido recorrer mas elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[33;1m
Recorrido preorden
==================[37;1m
[32;1m✓ [37;1mLa función de recorrido devuelve la cantidad de elementos esperados
[32;1m✓ [37;1mLos elementos en el vector tienen el orden esperado.
[32;1m✓ [37;1mPido recorrer menos elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[32;1m✓ [37;1mPido recorrer mas elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[33;1m
Recorrido postorden
===================[37;1m
[32;1m✓ [37;1mLa función de recorrido devuelve la cantidad de elementos esperados
[32;1m✓ [37;1mLos elementos en el vector tienen el orden esperado.
[32;1m✓ [37;1mPido recorrer menos elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[32;1m✓ [37;1mPido recorrer mas elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[33;1m
Iterador interno inorden
========================[37;1m
[32;1m✓ [37;1mEl iterador interno devuelve la cantidad de elementos que se esperaba iterar.
[32;1m✓ [37;1mSe invocó la función la cantidad de veces esperada.
[32;1m✓ [37;1mSe recorrieron las claves en el orden esperado.
[31;1m✗ [37;1mCuando la función devuelve false, deja de iterar y devuelve la cantidad correcta.
[31;1m✗ [37;1mSe invocó la función de iteracion la cantidad de veces esperada.
[33;1m
Iterador interno preorden
=========================[37;1m
[32;1m✓ [37;1mEl iterador interno devuelve la cantidad de elementos que se esperaba iterar.
[32;1m✓ [37;1mSe invocó la función la cantidad de veces esperada.
[32;1m✓ [37;1mSe recorrieron las claves en el orden esperado.
[31;1m✗ [37;1mCuando la función devuelve false, deja de iterar y devuelve la cantidad correcta.
[31;1m✗ [37;1mSe invocó la función de iteracion la cantidad de veces esperada.
[33;1m
Iterador interno postorden
==========================[37;1m
[32;1m✓ [37;1mEl iterador interno devuelve la cantidad de elementos que se esperaba iterar.
[32;1m✓ [37;1mSe invocó la función la cantidad de veces esperada.
[32;1m✓ [37;1mSe recorrieron las claves en el orden esperado.
[31;1m✗ [37;1mCuando la función devuelve false, deja de iterar y devuelve la cantidad correcta.
[31;1m✗ [37;1mSe invocó la función de iteracion la cantidad de veces esperada.
==32084== 
==32084== HEAP SUMMARY:
==32084==     in use at exit: 0 bytes in 0 blocks
==32084==   total heap usage: 14 allocs, 14 frees, 4,408 bytes allocated
==32084== 
==32084== All heap blocks were freed -- no leaks are possible
==32084== 
==32084== For lists of detected and suppressed errors, rerun with: -s
==32084== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas con NULL
================[37;1m
[32;1m✓ [37;1mNo puedo insertar nada en un abb nulo.
[32;1m✓ [37;1mNo puedo buscar nada en un abb nulo.
[32;1m✓ [37;1mNo puedo borrar nada de en un abb nulo.
[32;1m✓ [37;1mUn abb nulo es vacío.
[32;1m✓ [37;1mLa cantidad de elementos de un abb NULL es 0
[32;1m✓ [37;1mNo puedo iterar un abb nulo.
[32;1m✓ [37;1mNo puedo iterar con una funcion nula.
[32;1m✓ [37;1mPuedo iterar con puntero extra nulo.
[32;1m✓ [37;1mPuedo insertar elementos null sin problemas
[32;1m✓ [37;1mPuedo insertar elementos null sin problemas
[32;1m✓ [37;1mPuedo insertar elementos null sin problemas
==32085== 
==32085== HEAP SUMMARY:
==32085==     in use at exit: 0 bytes in 0 blocks
==32085==   total heap usage: 16 allocs, 16 frees, 4,456 bytes allocated
==32085== 
==32085== All heap blocks were freed -- no leaks are possible
==32085== 
==32085== For lists of detected and suppressed errors, rerun with: -s
==32085== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
------------ MÁS PRUEBAS DEL TDA ABB ------------
==================================================[37;1m
[33;1m
PRUEBAS DE CREACIÓN Y DESTRUCCIÓN
===================================[37;1m
[33;1m
Destrucción de abbs NULL
=========================[37;1m
[32;1m✓ [37;1mSe está por probar si es posible destruir un abb nulo.
[32;1m✓ [37;1mSe está por probar si es posible destruir un abb nulo con un destructor válido.
==32087== 
==32087== HEAP SUMMARY:
==32087==     in use at exit: 0 bytes in 0 blocks
==32087==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32087== 
==32087== All heap blocks were freed -- no leaks are possible
==32087== 
==32087== For lists of detected and suppressed errors, rerun with: -s
==32087== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Creación de abbs con comparador válido e inválido
====================================================[37;1m
[32;1m✓ [37;1mSe crea el abb.
[32;1m✓ [37;1mEl abb se crea vacío.
[32;1m✓ [37;1mEl tamaño de un abb recién creado es 0.
[32;1m✓ [37;1mSe está por probar si es posible destruir un abb vacío.
[32;1m✓ [37;1mSe crea otro abb.
[32;1m✓ [37;1mSe está por probar si es posible destruir este abb vacío con un destructor nulo.
[32;1m✓ [37;1mNo es posible crear un abb con un comparador nulo.
==32088== 
==32088== HEAP SUMMARY:
==32088==     in use at exit: 0 bytes in 0 blocks
==32088==   total heap usage: 4 allocs, 4 frees, 4,168 bytes allocated
==32088== 
==32088== All heap blocks were freed -- no leaks are possible
==32088== 
==32088== For lists of detected and suppressed errors, rerun with: -s
==32088== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==32086== 
==32086== HEAP SUMMARY:
==32086==     in use at exit: 0 bytes in 0 blocks
==32086==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32086== 
==32086== All heap blocks were freed -- no leaks are possible
==32086== 
==32086== For lists of detected and suppressed errors, rerun with: -s
==32086== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DE INSERCIÓN
=====================[37;1m
[33;1m
Inserción en abb nulo
======================[37;1m
[32;1m✓ [37;1mAl intentar insertar en un abb nulo, se devuelve NULL
==32090== 
==32090== HEAP SUMMARY:
==32090==     in use at exit: 0 bytes in 0 blocks
==32090==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32090== 
==32090== All heap blocks were freed -- no leaks are possible
==32090== 
==32090== For lists of detected and suppressed errors, rerun with: -s
==32090== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Inserciones en abb válido
==========================[37;1m
[32;1m✓ [37;1mEs posible insertar un elemento nulo en un abb válido
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee un elemento
[32;1m✓ [37;1mEs posible insertar un elemento no nulo en un abb válido
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee un elemento
[32;1m✓ [37;1mEs posible insertar un elemento que vive en el heap en un abb válido
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee un elemento
[32;1m✓ [37;1mEs posible insertar un elemento en un abb válido
[32;1m✓ [37;1mEs posible insertar otro elemento
[32;1m✓ [37;1mEs posible insertar otro elemento
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee tres elemento
[32;1m✓ [37;1mSe crea un nuevo arbol y se insertan 500 elementos.El abb no está vacío
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEs posible insertar un elemento en un abb válido
[32;1m✓ [37;1mEs posible insertar otro elemento 
[32;1m✓ [37;1mEs posible insertar un elemento repetido en el abb
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee tres elemento
==32091== 
==32091== HEAP SUMMARY:
==32091==     in use at exit: 0 bytes in 0 blocks
==32091==   total heap usage: 517 allocs, 517 frees, 16,460 bytes allocated
==32091== 
==32091== All heap blocks were freed -- no leaks are possible
==32091== 
==32091== For lists of detected and suppressed errors, rerun with: -s
==32091== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==32089== 
==32089== HEAP SUMMARY:
==32089==     in use at exit: 0 bytes in 0 blocks
==32089==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32089== 
==32089== All heap blocks were freed -- no leaks are possible
==32089== 
==32089== For lists of detected and suppressed errors, rerun with: -s
==32089== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DE BÚSQUEDA
====================[37;1m
[33;1m
Búsqueda en abb nulo
=====================[37;1m
[32;1m✓ [37;1mBuscar un elemento válido en un abb nulo devuelve NULL.
==32093== 
==32093== HEAP SUMMARY:
==32093==     in use at exit: 0 bytes in 0 blocks
==32093==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32093== 
==32093== All heap blocks were freed -- no leaks are possible
==32093== 
==32093== For lists of detected and suppressed errors, rerun with: -s
==32093== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Búsqueda de elementos existentes e inexistentes en abb válido
===============================================================[37;1m
[32;1m✓ [37;1mSe encontró el elemento buscado.
[32;1m✓ [37;1mSe buscó un elemento inexistente en un abb y se devolvió NULL.
==32094== 
==32094== HEAP SUMMARY:
==32094==     in use at exit: 0 bytes in 0 blocks
==32094==   total heap usage: 4 allocs, 4 frees, 4,168 bytes allocated
==32094== 
==32094== All heap blocks were freed -- no leaks are possible
==32094== 
==32094== For lists of detected and suppressed errors, rerun with: -s
==32094== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas mixtas de búsqueda
===========================[37;1m
[32;1m✓ [37;1mSe creó un abb y se insertó un elemento. Se encuentra ese elemento.
[32;1m✓ [37;1mSe insertan múltiples elementos, algunos repetidos.
[32;1m✓ [37;1mSe busca un elemento que no se encuentra en el abb y se devuelve NULL.
[32;1m✓ [37;1mSe busca uno de los elementos repetidos en el abb y se lo encuentra.
[32;1m✓ [37;1mSe eliminan elementos del abb.
[32;1m✓ [37;1mSe busca un elemento que continúa en el abb y se lo encuentra
[32;1m✓ [37;1mSe busca un elemento que ya no se encuentra en el abb y se devuelve NULL.
==32095== 
==32095== HEAP SUMMARY:
==32095==     in use at exit: 0 bytes in 0 blocks
==32095==   total heap usage: 6 allocs, 6 frees, 4,216 bytes allocated
==32095== 
==32095== All heap blocks were freed -- no leaks are possible
==32095== 
==32095== For lists of detected and suppressed errors, rerun with: -s
==32095== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==32092== 
==32092== HEAP SUMMARY:
==32092==     in use at exit: 0 bytes in 0 blocks
==32092==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32092== 
==32092== All heap blocks were freed -- no leaks are possible
==32092== 
==32092== For lists of detected and suppressed errors, rerun with: -s
==32092== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DE ELIMINACIÓN
=======================[37;1m
[33;1m
Eliminación en abb nulo
========================[37;1m
[32;1m✓ [37;1mNo se puede eliminar de un abb nulo
==32097== 
==32097== HEAP SUMMARY:
==32097==     in use at exit: 0 bytes in 0 blocks
==32097==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32097== 
==32097== All heap blocks were freed -- no leaks are possible
==32097== 
==32097== For lists of detected and suppressed errors, rerun with: -s
==32097== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Eliminación de elementos existentes e inexistentes en abb válido
==================================================================[37;1m
[32;1m✓ [37;1mSe tiene un abb no vacío
[32;1m✓ [37;1mEs posible eliminar el unico elemento que tiene el abb
[32;1m✓ [37;1mEl abb ahora está vacío
[32;1m✓ [37;1mSe tiene un abb no vacío
[32;1m✓ [37;1mEs posible eliminar el unico elemento que tiene el abb
[32;1m✓ [37;1mEl abb ahora está vacío
[32;1m✓ [37;1mSe tiene un abb vacío
[32;1m✓ [37;1mIntentar eliminar un elemento de un abb vacío devuelve NULL
[32;1m✓ [37;1mEl abb continúa vacío
[31;1m✗ [37;1mSe inserta un elemento en el abb. Ahora ya no está vacío
[32;1m✓ [37;1mIntentar eliminar un elemento que no se encuentra en el abb devuelve NULL
[32;1m✓ [37;1mEl abb no borró el elemento que almacenaba
==32098== 
==32098== HEAP SUMMARY:
==32098==     in use at exit: 0 bytes in 0 blocks
==32098==   total heap usage: 7 allocs, 7 frees, 4,240 bytes allocated
==32098== 
==32098== All heap blocks were freed -- no leaks are possible
==32098== 
==32098== For lists of detected and suppressed errors, rerun with: -s
==32098== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Eliminación de varios elementos de abbs grandes
================================================[37;1m
[32;1m✓ [37;1mTengo un nuevo abb. Su tamaño es 16
[32;1m✓ [37;1mEs posible quitar la raiz
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 15
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo izquierdo, sin nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 14
[32;1m✓ [37;1mEs posible quitar un elemento que tiene dos hijos y varios nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 13
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo izquierdo, con nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 12
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo dercho, con nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 11
[32;1m✓ [37;1mEs posible quitar un elemento que tiene hijo izquierdo y derecho, sin nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 10
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo derecho, sin nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 9
[32;1m✓ [37;1mEs posible quitar la nueva raiz, que tiene hijos derecho e izquierdo
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 8
[32;1m✓ [37;1mEs posible quitar un elemento que tiene hijo izquierdo y derecho, con nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 7
[32;1m✓ [37;1mEs posible quitar la nueva raiz, que no tiene hijo izquierdo, así que la reemplaza su hijo derecho
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 6
[32;1m✓ [37;1mEs posible quitar un elemento que no tiene hijos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 5
==32099== 
==32099== HEAP SUMMARY:
==32099==     in use at exit: 0 bytes in 0 blocks
==32099==   total heap usage: 18 allocs, 18 frees, 4,504 bytes allocated
==32099== 
==32099== All heap blocks were freed -- no leaks are possible
==32099== 
==32099== For lists of detected and suppressed errors, rerun with: -s
==32099== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==32096== 
==32096== HEAP SUMMARY:
==32096==     in use at exit: 0 bytes in 0 blocks
==32096==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32096== 
==32096== All heap blocks were freed -- no leaks are possible
==32096== 
==32096== For lists of detected and suppressed errors, rerun with: -s
==32096== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DEL ITERADOR
====================[37;1m
[33;1m
Iterar un abb nulo
==================[37;1m
[32;1m✓ [37;1mIterar un abb NULL de manera INORDEN devuelve 0
[32;1m✓ [37;1mIterar un abb NULL de manera PREORDEN devuelve 0
[32;1m✓ [37;1mIterar un abb NULL de manera POSTORDEN devuelve 0
==32101== 
==32101== HEAP SUMMARY:
==32101==     in use at exit: 0 bytes in 0 blocks
==32101==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32101== 
==32101== All heap blocks were freed -- no leaks are possible
==32101== 
==32101== For lists of detected and suppressed errors, rerun with: -s
==32101== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Iterar con una función nula
============================[37;1m
[32;1m✓ [37;1mIterar de manera INORDEN un abb válido con una función NULL devuelve 0
[32;1m✓ [37;1mIterar de manera PREORDEN un abb válido con una función NULL devuelve 0
[32;1m✓ [37;1mIterar de manera POSTORDEN un abb válido con una función NULL devuelve 0
==32102== 
==32102== HEAP SUMMARY:
==32102==     in use at exit: 0 bytes in 0 blocks
==32102==   total heap usage: 2 allocs, 2 frees, 4,120 bytes allocated
==32102== 
==32102== All heap blocks were freed -- no leaks are possible
==32102== 
==32102== For lists of detected and suppressed errors, rerun with: -s
==32102== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Iterar un abb válido
=====================[37;1m
[32;1m✓ [37;1mSe crea un abb.
[32;1m✓ [37;1mSe itera el abb de manera INORDEN en su totalidad con un aux nulo y se devuelve 0 correctamente
[32;1m✓ [37;1mSe itera el abb de manera PREORDEN en su totalidad con un aux nulo y se devuelve 0 correctamente
[32;1m✓ [37;1mSe itera el abb de manera POSTORDEN en su totalidad con un aux nulo y se devuelve 0 correctamente
[32;1m✓ [37;1mSe crea un abb y se insertan varios elementos.
[32;1m✓ [37;1mSe itera el abb de manera INORDEN en su totalidad con un aux nulo y se devuelve la cantidad correcta de elementos
[32;1m✓ [37;1mSe itera el abb de manera PREORDEN en su totalidad con un aux nulo y se devuelve la cantidad correcta de elementos
[32;1m✓ [37;1mSe itera el abb de manera POSTORDEN en su totalidad con un aux nulo y se devuelve la cantidad correcta de elementos
[31;1m✗ [37;1mSe itera un abb de manera INORDEN parcialmente y se devuelve la cantidad correcta.
[31;1m✗ [37;1mSe itera un abb de manera PREORDEN parcialmente y se devuelve la cantidad correcta.
[32;1m✓ [37;1mSe itera un abb de manera POSTORDEN parcialmente y se devuelve la cantidad correcta.
==32103== 
==32103== HEAP SUMMARY:
==32103==     in use at exit: 0 bytes in 0 blocks
==32103==   total heap usage: 14 allocs, 14 frees, 4,408 bytes allocated
==32103== 
==32103== All heap blocks were freed -- no leaks are possible
==32103== 
==32103== For lists of detected and suppressed errors, rerun with: -s
==32103== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==32100== 
==32100== HEAP SUMMARY:
==32100==     in use at exit: 0 bytes in 0 blocks
==32100==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32100== 
==32100== All heap blocks were freed -- no leaks are possible
==32100== 
==32100== For lists of detected and suppressed errors, rerun with: -s
==32100== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DE RECORRIDOS CON ARRAY
===============================[37;1m
[33;1m
Recorrer un abb nulo
====================[37;1m
[32;1m✓ [37;1mSi se intenta recorrer de manera INORDEN un abb NULL, se devuelve el valor 0
[32;1m✓ [37;1mSi se intenta recorrer de manera PREORDEN un abb NULL, se devuelve el valor 0
[32;1m✓ [37;1mSi se intenta recorrer de manera POSTORDEN un abb NULL, se devuelve el valor 0
==32105== 
==32105== HEAP SUMMARY:
==32105==     in use at exit: 0 bytes in 0 blocks
==32105==   total heap usage: 2 allocs, 2 frees, 4,128 bytes allocated
==32105== 
==32105== All heap blocks were freed -- no leaks are possible
==32105== 
==32105== For lists of detected and suppressed errors, rerun with: -s
==32105== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Recorrer con un array nulo y con tamanio cero
=============================================[37;1m
[32;1m✓ [37;1mSi se intenta recorrer de manera INORDEN un abb válido con un array nulo, se devuelve 0
[32;1m✓ [37;1mSi se intenta recorrer de manera PREORDEN un abb válido con un array nulo, se devuelve 0
[32;1m✓ [37;1mSi se intenta recorrer de manera POSTORDEN un abb válido con un array nulo, se devuelve 0
==32106== 
==32106== HEAP SUMMARY:
==32106==     in use at exit: 0 bytes in 0 blocks
==32106==   total heap usage: 2 allocs, 2 frees, 4,120 bytes allocated
==32106== 
==32106== All heap blocks were freed -- no leaks are possible
==32106== 
==32106== For lists of detected and suppressed errors, rerun with: -s
==32106== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Recorrer un abb válido
=======================[37;1m
[32;1m✓ [37;1mSi se intenta recorrer de manera INORDEN un abb vacío, se devuelve 0
[32;1m✓ [37;1mSi se intenta recorrer de manera PREORDEN un abb vacío, se devuelve 0
[32;1m✓ [37;1mSi se intenta recorrer de manera POSTORDEN un abb vacío, se devuelve 0
[32;1m✓ [37;1mSe recorre un abb de manera INORDEN con menos elementos que posiciones en el array, y se devuelve la cantidad correcta de elementos.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera PREORDEN con menos elementos que posiciones en el array, y se devuelve la cantidad correcta de elementos.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera POSTORDEN con menos elementos que posiciones en el array, y se devuelve la cantidad correcta de elementos.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera INORDEN con más elementos que posiciones en el array, y se devuelve el tope del array.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mEl cuarto elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera PREORDEN con más elementos que posiciones en el array, y se devuelve el tope del array.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mEl cuarto elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera POSTORDEN con más elementos que posiciones en el array, y se devuelve el tope del array.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mEl cuarto elemento en el array es el correcto
==32107== 
==32107== HEAP SUMMARY:
==32107==     in use at exit: 0 bytes in 0 blocks
==32107==   total heap usage: 16 allocs, 16 frees, 4,488 bytes allocated
==32107== 
==32107== All heap blocks were freed -- no leaks are possible
==32107== 
==32107== For lists of detected and suppressed errors, rerun with: -s
==32107== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Recorrer un abb válido, modificarlo y volver a recorrerlo
==========================================================[37;1m
[32;1m✓ [37;1mEs posible insertar en un nuevo abb
[32;1m✓ [37;1mEl abb posee 1 elemento
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl elemento almacenado es el correcto
[32;1m✓ [37;1mSe insertaron varios elementos. Ahora el abb posee 6 elementos
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mSe vuelve a recorrer el abb y se almacena la nueva cantidad correcta de elementos
[32;1m✓ [37;1mEl primer elemento es el correcto
[32;1m✓ [37;1mEl segundo elemento es el correcto
[32;1m✓ [37;1mEl tercer elemento es el correcto
[32;1m✓ [37;1mEl cuarto elemento es el correcto
[32;1m✓ [37;1mEl quinto elemento es el correcto
[32;1m✓ [37;1mEl sexto elemento es el correcto
[32;1m✓ [37;1mSe inserta un nuevo elemento en el abb, más chico que el menor anterior
[32;1m✓ [37;1mSe inserta un elemento repetido en el abb
[32;1m✓ [37;1mSe inserta un nuevo elemento máximo en el abb, mayor al más grande anterior
[32;1m✓ [37;1mSe insertaron varios elementos. Ahora el abb posee 9 elementos
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mSe vuelve a recorrer el abb y se almacena la nueva cantidad correcta de elementos
[32;1m✓ [37;1mEl primer elemento es el correcto
[32;1m✓ [37;1mEl segundo elemento es el correcto
[32;1m✓ [37;1mEl tercer elemento es el correcto
[32;1m✓ [37;1mEl cuarto elemento es el correcto
[32;1m✓ [37;1mEl quinto elemento es el correcto
[32;1m✓ [37;1mEl sexto elemento es el correcto
[32;1m✓ [37;1mEl séptimo elemento es el correcto
[32;1m✓ [37;1mEl octavo elemento es el correcto
[32;1m✓ [37;1mEl noveno elemento es el correcto
[32;1m✓ [37;1mTengo un nuevo abb. Su tamaño es 16
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 13º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 14º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 15º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 16º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar la raiz
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 13º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 14º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 15º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo izquierdo, sin nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 13º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 14º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que tiene dos hijos y varios nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 13º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo izquierdo, con nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo dercho, con nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que tiene hijo izquierdo y derecho, sin nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo derecho, sin nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar la nueva raiz, que tiene hijos derecho e izquierdo
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que tiene hijo izquierdo y derecho, con nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar la nueva raiz, que no tiene hijo izquierdo, así que la reemplaza su hijo derecho
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que no tiene hijos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
==32108== 
==32108== HEAP SUMMARY:
==32108==     in use at exit: 0 bytes in 0 blocks
==32108==   total heap usage: 30 allocs, 30 frees, 5,136 bytes allocated
==32108== 
==32108== All heap blocks were freed -- no leaks are possible
==32108== 
==32108== For lists of detected and suppressed errors, rerun with: -s
==32108== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==32104== 
==32104== HEAP SUMMARY:
==32104==     in use at exit: 0 bytes in 0 blocks
==32104==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32104== 
==32104== All heap blocks were freed -- no leaks are possible
==32104== 
==32104== For lists of detected and suppressed errors, rerun with: -s
==32104== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[37;1m
---------------------------------
461 pruebas corridas, 9 errores - D:
[0m==32076== 
==32076== HEAP SUMMARY:
==32076==     in use at exit: 0 bytes in 0 blocks
==32076==   total heap usage: 1 allocs, 1 frees, 4,096 bytes allocated
==32076== 
==32076== All heap blocks were freed -- no leaks are possible
==32076== 
==32076== For lists of detected and suppressed errors, rerun with: -s
==32076== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
make: *** [makefile-chanutron:8: valgrind] Error 2

[1;31m¡ERROR CORRIENDO VALGRIND! Revisa tu entrega, las pruebas de la CÁTEDRA no pasan.[0m

